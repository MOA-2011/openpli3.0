--- startwizard.xml	2014-03-07 12:18:15.000000000 +0900
+++ /home/knuth/EXT/001.Model/010.Ios100hd/openpli3.0/build-ios100/tmp/work/ios100-oe-linux/openpli-enigma2-image-1.0-r0/rootfs/usr/share/enigma2/startwizard.xml	2014-02-06 11:11:23.000000000 +0900
@@ -9,7 +9,7 @@
 		<step id="introduction" >
 			<text value="Use the up/down keys on your remote control to select an option. After that, press OK." />
 			<list>
-				<listentry caption="Use the wizard to set up basic features" step="network" />
+				<listentry caption="Use the wizard to set up basic features" step="nima" />
 				<listentry caption="Exit the wizard" step="end" />
 			</list>
 			<code>
@@ -18,47 +18,12 @@
 self.selectKey("DOWN")
 			</code>
 		</step>
-		<step id="network" >
-			<text value="Please connect your receiver to the internet" />
-			<list>
-				<listentry caption="Check the internet connection" step="update" />
-				<listentry caption="Skip internet connection check (disables automatic package installation)" step="nima" />
-			</list>
-			<code>
-self.clearSelectedKeys()
-self.selectKey("UP")
-self.selectKey("DOWN")
-			</code>
-		</step>
-		<step id="update">
-			<text value="Checking the internet connection" />
-			<config screen="InstallWizard" module="InstallWizard" args="0" type="ConfigList" />
-			<code>
-self.clearSelectedKeys()
-self.selectKey("OK")
-			</code>
-		</step>
-		<step id="networkfailed" >
-			<condition>
-self.condition = not config.misc.installwizard.ipkgloaded.value
-			</condition>
-			<text value="Your receiver does not have an internet connection" />
-			<list>
-				<listentry caption="Check the internet connection again" step="update" />
-				<listentry caption="Skip internet connection check (disables automatic package installation)" step="nima" />
-			</list>
-			<code>
-self.clearSelectedKeys()
-self.selectKey("UP")
-self.selectKey("DOWN")
-			</code>
-		</step>
 		<step id="nima">
 			<condition>
 from Components.NimManager import nimmanager
-self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty
+self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty and config.misc.startwizard.shownimconfig.value
 			</condition>
-			<text value="Please set up tuner A" />
+			<text value="Use the left and right buttons to change an option.\n\nPlease set up tuner A" />
 			<config screen="NimSetup" module="Satconfig" args="0" type="ConfigList" />
 			<code>
 self.clearSelectedKeys()
@@ -69,7 +34,7 @@
 		<step id="nimb">
 			<condition>
 from Components.NimManager import nimmanager
-self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty
+self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty and config.misc.startwizard.shownimconfig.value
 			</condition>
 			<text value="Please set up tuner B" />
 			<config screen="NimSetup" module="Satconfig" args="1" type="ConfigList" />
@@ -82,7 +47,7 @@
 		<step id="nimc">
 			<condition>
 from Components.NimManager import nimmanager
-self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty
+self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty and config.misc.startwizard.shownimconfig.value
 			</condition>
 			<text value="Please set up tuner C" />
 			<config screen="NimSetup" module="Satconfig" args="2" type="ConfigList" />
@@ -95,7 +60,7 @@
 		<step id="nimd">
 			<condition>
 from Components.NimManager import nimmanager
-self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty
+self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty and config.misc.startwizard.shownimconfig.value
 			</condition>
 			<text value="Please set up tuner D" />
 			<config screen="NimSetup" module="Satconfig" args="3" type="ConfigList" />
@@ -105,38 +70,25 @@
 self.selectKey("RIGHT")
 			</code>
 		</step>
-		<step id="channels">
-			<condition>
-from Components.NimManager import nimmanager
-self.condition = nimmanager.somethingConnected() and config.misc.installwizard.hasnetwork.value and config.misc.installwizard.ipkgloaded.value
-			</condition>
-			<text value="Do you want to install a channel list?" />
-			<config screen="InstallWizard" module="InstallWizard" args="1" type="ConfigList" />
-			<code>
-self.clearSelectedKeys()
-self.selectKey("LEFT")
-self.selectKey("RIGHT")
-			</code>
-		</step>
 		<step id="scanquestion">
 			<text value="Do you want to do a service scan?" />
 			<condition>
 from Components.NimManager import nimmanager
-self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
+self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
 			</condition>
 			<code>
 self.hideRc()
 			</code>
 			<list>
-				<listentry caption="No" step="softcam" />
 				<listentry caption="Yes, do an automatic scan now" step="scan" />
 				<listentry caption="Yes, do a manual scan now" step="manualscan" />
+				<listentry caption="No, scan later manually" step="finisheddefaultsatlists" />
 			</list>
 		</step>
-		<step id="scan" nextstep="softcam">
+		<step id="scan" nextstep="finisheddefaultsatlists">
 			<condition>
 from Components.NimManager import nimmanager
-self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
+self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
 			</condition>			
 			<text value="What do you want to scan?" />
 			<config screen="ScanSimple" module="ScanSetup" type="ConfigList" />
@@ -144,7 +96,7 @@
 		<step id="manualscan">
 			<condition>
 from Components.NimManager import nimmanager
-self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
+self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
 			</condition>
 			<text value="What do you want to scan?" />
 			<config screen="ScanSetup" module="ScanSetup" type="ConfigList" />
@@ -152,31 +104,62 @@
 		<step id="nextscan">
 			<condition>
 from Components.NimManager import nimmanager
-self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
+self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
 			</condition>
 			<text value="Do you want to do another manual service scan?" />
 			<list>
-				<listentry caption="No" step="softcam" />
 				<listentry caption="Yes, do another manual scan now" step="manualscan" />
+				<listentry caption="No, scan later manually" step="finisheddefaultsatlists" />
 			</list>
 		</step>
-		<step id="softcam">
-			<condition>
-self.condition = config.misc.installwizard.hasnetwork.value and config.misc.installwizard.ipkgloaded.value
-			</condition>
-			<text value="Would you like to install a softcam?" />
-			<config screen="InstallWizard" module="InstallWizard" args="2" type="ConfigList" />
-			<code>
-self.clearSelectedKeys()
-self.selectKey("LEFT")
-self.selectKey("RIGHT")
+		<step id="finisheddefaultsatlists">
+			<text value="Do you want to enable the parental control feature on your Settop Box?" />
+			<list>
+				<listentry caption="No" step="end" />
+				<listentry caption="Yes" step="parentalsetup" />
+			</list>
+			<code pos="after">
+if self["list"].index == 0:
+	config.ParentalControl.configured.value = True
+else:
+	config.ParentalControl.configured.value = False
+config.ParentalControl.configured.save()
 			</code>
 		</step>
-		<step id="end" laststep="true">
-			<text value="Thank you for using the wizard. Your receiver is now ready for use.\nPress OK to start using your receiver." />
-			<code>
-self.clearSelectedKeys()
-self.selectKey("OK")
+		<step id="parentalsetup">
+			<text value="You need to set a PIN code and hide it from your children.\n\nDo you want to set the pin now?" />
+			<list>
+				<listentry caption="Yes" step="finishparentalsetup" />
+				<listentry caption="No" step="warnpin" />
+			</list>
+			<code pos="after">
+from ParentalControlSetup import ParentalControlChangePin
+if self["list"].index == 0:
+	self.session.open(ParentalControlChangePin, config.ParentalControl.servicepin[0], _("parental control pin"))
+			</code>
+		</step>
+		<step id="warnpin">
+			<text value="Please be aware, that anyone can disable the parental control, if you have not set a PIN." />
+		</step>
+		<step id="finishparentalsetup">
+			<code>
+if config.ParentalControl.setuppin.value == "aaaa":
+	config.ParentalControl.setuppinactive.value = False
+else:
+	config.ParentalControl.setuppinactive.value = True
+config.ParentalControl.setuppinactive.save()
+config.ParentalControl.servicepinactive.value = True
+config.ParentalControl.servicepinactive.save()
+config.ParentalControl.setuppin.value = config.ParentalControl.servicepin[0].value
+config.ParentalControl.setuppin.save()
 			</code>
+
+			<text value="After the start wizard is completed, you need to protect single services. Refer to your Settop Box's manual on how to do that." />
+		</step>
+		<step id="end" laststep="true">
+			<condition>
+self.condition = self.isLastWizard
+			</condition>
+			<text value="Thank you for using the wizard. Your box is now ready to use.\nPlease press OK to start using your Settop Box." />
 		</step>
 </wizard>
